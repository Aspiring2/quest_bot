from asgiref.sync import sync_to_async
from django.conf import settings
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.constants import ParseMode
from telegram.ext import ContextTypes, CallbackQueryHandler

from bot.models import User, Task, Location, Hint
import os


async def start_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_telegram_id = update.effective_user.id
    username = update.effective_user.username

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user, created = await sync_to_async(User.objects.get_or_create)(
        telegram_id=user_telegram_id,
        defaults={'username': username, 'coins': 0}
    )

    # –û–±–Ω—É–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –º–æ–Ω–µ—Ç
    if not created:  # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–ª
        user.coins = 0
        await sync_to_async(user.save)()

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä–≤–æ–π –ª–æ–∫–∞—Ü–∏–∏
    first_location = await sync_to_async(Location.objects.order_by('order').first)()
    if first_location:
        response = (
            f"üëã *–ü—Ä–∏–≤–µ—Ç, {user.username or '–ò–≥—Ä–æ–∫'}! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–≤–µ—Å—Ç!* üó∫Ô∏è\n\n"
            f"üìú *–û–ø–∏—Å–∞–Ω–∏–µ*: _{first_location.description}_\n"
            f"üí∞ *–ù–∞–≥—Ä–∞–¥–∞ –∑–∞ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ*: `{first_location.hint_cost}` –º–æ–Ω–µ—Ç ü™ô"
        )

        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –Ω–∞—á–∞–ª–∞ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è
        keyboard = [
            [InlineKeyboardButton("üöÄ –ù–∞—á–∞—Ç—å –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ", callback_data=f"start_location_{first_location.id}")],
            [InlineKeyboardButton("–ë–∞–ª–∞–Ω—Å ü™ô", callback_data="show_balance")],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await update.message.reply_text(response, reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN)
    else:
        await update.message.reply_text("‚ö†Ô∏è *–ö–≤–µ—Å—Ç –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –ø–æ–∑–∂–µ.*", parse_mode=ParseMode.MARKDOWN)


async def start_location(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ id –ª–æ–∫–∞—Ü–∏–∏ –∏–∑ callback_data
    location_id = int(query.data.split("_")[-1])
    location = await sync_to_async(Location.objects.get)(id=location_id)
    user_telegram_id = query.from_user.id
    user = await sync_to_async(User.objects.get)(telegram_id=user_telegram_id)

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä–≤–æ–π –∑–∞–¥–∞—á–∏ –∏–∑ –ª–æ–∫–∞—Ü–∏–∏
    task = await sync_to_async(location.tasks.order_by('order').first)()
    if task:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Ç–µ–∫—É—â–µ–π –∑–∞–¥–∞—á–∏ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        context.user_data['current_task_id'] = task.id

        response = f"–£–≥–∞–¥–∞–π –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Ä–≤–æ–π –ª–æ–∫–∞—Ü–∏–∏ –ø–æ –∫–∞—Ä—Ç–∏–Ω–∫–µ"

        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø–æ–¥—Å–∫–∞–∑–∫–∏
        keyboard = [
            [InlineKeyboardButton("–ü–æ–¥—Å–∫–∞–∑–∫–∞", callback_data=f"hint_{task.id}")],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
        if task.image:
            image_path = os.path.join(settings.MEDIA_ROOT, str(task.image))
            if os.path.exists(image_path):
                with open(image_path, 'rb') as image_file:
                    await context.bot.send_photo(chat_id=query.message.chat_id, photo=image_file)

        await query.message.reply_text(response, reply_markup=reply_markup)
    else:
        await query.message.reply_text("–ù–µ—Ç –∑–∞–¥–∞—á –≤ —ç—Ç–æ–π –ª–æ–∫–∞—Ü–∏–∏.")


async def hint_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ id –∑–∞–¥–∞—á–∏ –∏–∑ callback_data
    task_id = int(query.data.split("_")[-1])
    task = await sync_to_async(Task.objects.get)(id=task_id)
    user_telegram_id = query.from_user.id
    user = await sync_to_async(User.objects.get)(telegram_id=user_telegram_id)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ –º–æ–Ω–µ—Ç –¥–ª—è –ø–æ–¥—Å–∫–∞–∑–∫–∏
    hint_cost = await sync_to_async(lambda: task.location.hint_cost)()
    if user.coins >= hint_cost:
        user.coins -= hint_cost
        await sync_to_async(user.save)()

        response = f"–ü–æ–¥—Å–∫–∞–∑–∫–∞ –¥–ª—è –∑–∞–¥–∞—á–∏: {task.text}\n\n"
        response += f"{task.answer[:3]}... (–∫–æ–Ω–µ—Ü –ø–æ–¥—Å–∫–∞–∑–∫–∏)"
        await query.message.reply_text(response)
    else:
        await query.message.reply_text("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç –¥–ª—è –ø–æ–¥—Å–∫–∞–∑–∫–∏!")


async def process_answer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_telegram_id = update.effective_user.id
    user = await sync_to_async(User.objects.get)(telegram_id=user_telegram_id)

    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –∑–∞–¥–∞—á–∏ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    task_id = context.user_data.get('current_task_id')
    if not task_id:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∑–∞–¥–∞—á–∏.")
        return

    task = await sync_to_async(Task.objects.get)(id=task_id)
    user_answer = update.message.text.strip().lower()  # –ü—Ä–∏–≤–æ–¥–∏–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
    correct_answer = task.answer.lower()  # –ü—Ä–∏–≤–æ–¥–∏–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –∫–ª—é—á–µ–≤–æ–π —á–∞—Å—Ç–∏ –æ—Ç–≤–µ—Ç–∞
    if correct_answer in user_answer or user_answer in correct_answer:
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –±–∞–ª–∞–Ω—Å –º–æ–Ω–µ—Ç
        user.coins += task.reward
        await sync_to_async(user.save)()

        response = (
            f"‚úÖ *–ü—Ä–∞–≤–∏–ª—å–Ω–æ!* –í—ã –ø–æ–ª—É—á–∏–ª–∏ `{task.reward}` –º–æ–Ω–µ—Ç ü™ô\n"
            f"üíé *–í–∞—à –±–∞–ª–∞–Ω—Å*: `{user.coins}` –º–æ–Ω–µ—Ç ü™ô"
        )

        # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–π –∑–∞–¥–∞—á–µ
        next_task = await sync_to_async(
            lambda: Task.objects.filter(location=task.location, order__gt=task.order).order_by('order').first()
        )()

        if next_task:
            context.user_data['current_task_id'] = next_task.id
            response += f"\n\nüîç *–°–ª–µ–¥—É—é—â–∞—è –∑–∞–¥–∞—á–∞*: _{next_task.text}_"

            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ç–µ–∫—Å—Ç–æ–º –∑–∞–¥–∞—á–∏
            await update.message.reply_text(response, parse_mode=ParseMode.MARKDOWN)

            # –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–∞–¥–∞—á–∏, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
            if next_task.image:
                image_path = os.path.join(settings.MEDIA_ROOT, str(next_task.image))
                if os.path.exists(image_path):
                    with open(image_path, 'rb') as image_file:
                        await context.bot.send_photo(chat_id=update.message.chat_id, photo=image_file)

            # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø–æ–¥—Å–∫–∞–∑–∫–∏
            keyboard = [
                [InlineKeyboardButton("üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞", callback_data=f"hint_{next_task.id}")],
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)

            # –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–Ω–æ–ø–æ–∫
            await update.message.reply_text("", reply_markup=reply_markup)
        else:
            # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ª–æ–∫–∞—Ü–∏–∏
            del context.user_data['current_task_id']  # –£–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â—É—é –∑–∞–¥–∞—á—É –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            response += "\n\nüèÅ *–í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ –≤—Å–µ –∑–∞–¥–∞—á–∏ –≤ —ç—Ç–æ–π –ª–æ–∫–∞—Ü–∏–∏!*"
            keyboard = [
                [InlineKeyboardButton("üö© –Ø –Ω–∞ –º–µ—Å—Ç–µ", callback_data=f"finish_location_{task.location.id}")],
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await update.message.reply_text(response, reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN)
    else:
        # –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
        response = "‚ùå *–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ.* –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑."
        await update.message.reply_text(response, parse_mode=ParseMode.MARKDOWN)

async def show_balance(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    user_telegram_id = query.from_user.id
    user = await sync_to_async(User.objects.get)(telegram_id=user_telegram_id)

    response = f"–í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {user.coins} –º–æ–Ω–µ—Ç."
    await query.message.reply_text(response)


async def hint_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ ID –∑–∞–¥–∞—á–∏ –∏ –ø–æ–¥—Å–∫–∞–∑–∫–∏ –∏–∑ callback_data
    data = query.data.split("_")
    task_id = int(data[1])
    hint_id = int(data[2]) if len(data) > 2 else None

    task = await sync_to_async(Task.objects.get)(id=task_id)
    user_telegram_id = query.from_user.id
    user = await sync_to_async(User.objects.get)(telegram_id=user_telegram_id)

    if hint_id:
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ø–æ–¥—Å–∫–∞–∑–∫–∏
        hint = await sync_to_async(Hint.objects.get)(id=hint_id)
        if user.coins >= hint.cost:
            user.coins -= hint.cost
            await sync_to_async(user.save)()

            response = f"–ü–æ–¥—Å–∫–∞–∑–∫–∞ –¥–ª—è –∑–∞–¥–∞—á–∏: {task.text}\n\n"
            response += f"{hint.text}"
            if hint.image:
                image_path = os.path.join(settings.MEDIA_ROOT, str(hint.image))
                if os.path.exists(image_path):
                    with open(image_path, 'rb') as image_file:
                        await context.bot.send_photo(chat_id=update.effective_chat.id, photo=image_file)
            await query.message.reply_text(response)
        else:
            await query.message.reply_text("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç –¥–ª—è –ø–æ–¥—Å–∫–∞–∑–∫–∏!")
    else:
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–ø–∏—Å–∫–∞ –ø–æ–¥—Å–∫–∞–∑–æ–∫
        hints = await sync_to_async(lambda: list(task.hints.all()))()
        if hints:
            keyboard = [
                [InlineKeyboardButton(f"–ü–æ–¥—Å–∫–∞–∑–∫–∞ {hint.order + 1} (–°—Ç–æ–∏–º–æ—Å—Ç—å: {hint.cost} –º–æ–Ω–µ—Ç)", callback_data=f"hint_{task_id}_{hint.id}")]
                for hint in hints
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Å–∫–∞–∑–∫—É:", reply_markup=reply_markup)
        else:
            await query.message.reply_text("–î–ª—è —ç—Ç–æ–π –∑–∞–¥–∞—á–∏ –Ω–µ—Ç –ø–æ–¥—Å–∫–∞–∑–æ–∫.")


async def finish_location(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ id –ª–æ–∫–∞—Ü–∏–∏ –∏–∑ callback_data
    location_id = int(query.data.split("_")[-1])
    location = await sync_to_async(Location.objects.get)(id=location_id)
    user_telegram_id = query.from_user.id
    user = await sync_to_async(User.objects.get)(telegram_id=user_telegram_id)

    # –ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –º–æ–Ω–µ—Ç –∑–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ª–æ–∫–∞—Ü–∏–∏
    user.coins += location.hint_cost
    await sync_to_async(user.save)()

    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–π –ª–æ–∫–∞—Ü–∏–∏
    next_location = await sync_to_async(
        lambda: Location.objects.filter(order__gt=location.order).order_by('order').first()
    )()

    if next_location:
        response = (
            f"üéâ *–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª–∏ –ª–æ–∫–∞—Ü–∏—é*: _{location.name}_! üèÅ\n\n"
            f"üí∞ *–ù–∞–≥—Ä–∞–¥–∞*: `{location.hint_cost}` –º–æ–Ω–µ—Ç ü™ô\n"
            f"üíé *–í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å*: `{user.coins}` –º–æ–Ω–µ—Ç ü™ô\n\n"
            f"üìñ *_{next_location.description}_"
        )

        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –Ω–∞—á–∞–ª–∞ —Å–ª–µ–¥—É—é—â–µ–π –ª–æ–∫–∞—Ü–∏–∏
        keyboard = [
            [InlineKeyboardButton("‚û°Ô∏è –ü–µ—Ä–µ–π—Ç–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–π –ª–æ–∫–∞—Ü–∏–∏", callback_data=f"start_location_{next_location.id}")],
            [InlineKeyboardButton("–ë–∞–ª–∞–Ω—Å ü™ô", callback_data="show_balance")],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.message.reply_text(response, reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN)
    else:
        response = (
            f"üéâ *–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª–∏ –ª–æ–∫–∞—Ü–∏—é*: _{location.name}_! üèÅ\n\n"
            f"üí∞ *–ù–∞–≥—Ä–∞–¥–∞*: `{location.hint_cost}` –º–æ–Ω–µ—Ç ü™ô\n"
            f"üíé *–í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å*: `{user.coins}` –º–æ–Ω–µ—Ç ü™ô\n\n"
            f"üéä *–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, –≤—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ –≤–µ—Å—å –∫–≤–µ—Å—Ç!* üèÜ"
        )
        await query.message.reply_text(response, parse_mode=ParseMode.MARKDOWN)